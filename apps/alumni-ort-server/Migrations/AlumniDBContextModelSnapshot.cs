// <auto-generated />
using System;
using AlumniOrtServer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AlumniOrtServer.Migrations
{
    [DbContext(typeof(AlumniDBContext))]
    partial class AlumniDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AlumniOrtServer.Data.Entities.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Type");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Claim");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "name",
                            UserId = 1,
                            Value = "Maor"
                        },
                        new
                        {
                            Id = 2,
                            Type = "role",
                            UserId = 1,
                            Value = "Alumnus"
                        },
                        new
                        {
                            Id = 3,
                            Type = "userId",
                            UserId = 1,
                            Value = "1"
                        },
                        new
                        {
                            Id = 4,
                            Type = "name",
                            UserId = 2,
                            Value = "maor"
                        },
                        new
                        {
                            Id = 5,
                            Type = "role",
                            UserId = 2,
                            Value = "Employer"
                        },
                        new
                        {
                            Id = 6,
                            Type = "userId",
                            UserId = 2,
                            Value = "2"
                        },
                        new
                        {
                            Id = 7,
                            Type = "name",
                            UserId = 3,
                            Value = "admin"
                        },
                        new
                        {
                            Id = 8,
                            Type = "role",
                            UserId = 3,
                            Value = "Admin"
                        },
                        new
                        {
                            Id = 9,
                            Type = "userId",
                            UserId = 3,
                            Value = "3"
                        });
                });

            modelBuilder.Entity("AlumniOrtServer.Data.Entities.Course_StudyProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudyProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudyProgramId");

                    b.ToTable("Course_StudyProgram");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "C Sharp",
                            StudyProgramId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Autocad",
                            StudyProgramId = 2
                        },
                        new
                        {
                            Id = 2,
                            Name = "SQL",
                            StudyProgramId = 1
                        });
                });

            modelBuilder.Entity("AlumniOrtServer.Data.Entities.JobOffer_City", b =>
                {
                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("JobOfferId")
                        .HasColumnType("int");

                    b.HasKey("CityId", "JobOfferId");

                    b.HasIndex("JobOfferId");

                    b.ToTable("JobOffer_Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            JobOfferId = 1
                        },
                        new
                        {
                            CityId = 2,
                            JobOfferId = 1
                        });
                });

            modelBuilder.Entity("AlumniOrtServer.Data.Entities.JobOffer_StudyProgram", b =>
                {
                    b.Property<int>("StudyProgramId")
                        .HasColumnType("int");

                    b.Property<int>("JobOfferId")
                        .HasColumnType("int");

                    b.HasKey("StudyProgramId", "JobOfferId");

                    b.HasIndex("JobOfferId");

                    b.ToTable("JobOffer_StudyPrograms");

                    b.HasData(
                        new
                        {
                            StudyProgramId = 1,
                            JobOfferId = 1
                        },
                        new
                        {
                            StudyProgramId = 2,
                            JobOfferId = 1
                        });
                });

            modelBuilder.Entity("AlumniOrtServer.Data.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "אנגלית"
                        },
                        new
                        {
                            Id = 2,
                            Name = "צרפתית"
                        });
                });

            modelBuilder.Entity("AlumniOrtServer.Data.Entities.ModeStudy", b =>
                {
                    b.Property<int>("ModeStudyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("ModeStudyId");

                    b.ToTable("ModeStudies");

                    b.HasData(
                        new
                        {
                            ModeStudyId = 1,
                            Name = "Frontally"
                        },
                        new
                        {
                            ModeStudyId = 2,
                            Name = "Online"
                        });
                });

            modelBuilder.Entity("AlumniOrtServer.Data.Entities.ModeStudy_City", b =>
                {
                    b.Property<int>("ModeStudyId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("ModeStudyId", "CityId", "TeacherId");

                    b.HasIndex("CityId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ModeStudy_Cities");

                    b.HasData(
                        new
                        {
                            ModeStudyId = 1,
                            CityId = 2,
                            TeacherId = 1
                        });
                });

            modelBuilder.Entity("AlumniOrtServer.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Employer"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Alumnus"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Student"
                        });
                });

            modelBuilder.Entity("AlumniOrtServer.Data.Entities.TeacherCourse", b =>
                {
                    b.Property<int>("Course_StudyProgramId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Course_StudyProgramId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherCourses");

                    b.HasData(
                        new
                        {
                            Course_StudyProgramId = 1,
                            TeacherId = 1
                        },
                        new
                        {
                            Course_StudyProgramId = 2,
                            TeacherId = 1
                        },
                        new
                        {
                            Course_StudyProgramId = 3,
                            TeacherId = 1
                        });
                });

            modelBuilder.Entity("AlumniOrtServer.Data.Entities.TeacherLanguage", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("LanguageId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherLanguages");

                    b.HasData(
                        new
                        {
                            LanguageId = 2,
                            TeacherId = 1
                        });
                });

            modelBuilder.Entity("AlumniOrtServer.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "אונליין"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ירושלים"
                        },
                        new
                        {
                            Id = 3,
                            Name = "בית מאיר"
                        });
                });

            modelBuilder.Entity("AlumniOrtServer.Models.College", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("College");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "אורט"
                        });
                });

            modelBuilder.Entity("AlumniOrtServer.Models.JobOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployerId")
                        .HasColumnType("int");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("JobRequirements")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailCV")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Publish")
                        .HasColumnType("bit");

                    b.Property<string>("TitleJob")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.ToTable("JobOffers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployerId = 2,
                            JobDescription = "fvfvfvf",
                            JobRequirements = "sdcdscsdcsd",
                            Logo = "Logo",
                            MailCV = "sh@gmail.com",
                            Phone = "05079855556",
                            Publish = true,
                            TitleJob = "junior"
                        });
                });

            modelBuilder.Entity("AlumniOrtServer.Models.StudyProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("StudyProgram");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "בנייין"
                        },
                        new
                        {
                            Id = 2,
                            Name = "תוכנה"
                        });
                });

            modelBuilder.Entity("AlumniOrtServer.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlumnusId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailForStudy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Rate")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("AlumnusId")
                        .IsUnique();

                    b.ToTable("Teacher");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlumnusId = 1,
                            Description = "dcscsdc",
                            Logo = "sdcdscs",
                            MailForStudy = "sdcdscsd",
                            Rate = "43"
                        });
                });

            modelBuilder.Entity("AlumniOrtServer.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("AlumniOrtServer.Data.Entities.Admin", b =>
                {
                    b.HasBaseType("AlumniOrtServer.Models.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            FirstName = "admin",
                            LastName = "sdsd",
                            Mail = "csdcdc",
                            Password = "z2jwOXzgP4Y=",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("AlumniOrtServer.Models.Alumnus", b =>
                {
                    b.HasBaseType("AlumniOrtServer.Models.User");

                    b.Property<string>("CardId")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("CardId");

                    b.Property<int>("CityId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("CityId");

                    b.Property<int>("CollegeId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("CollegeId");

                    b.Property<DateTime>("DateOfBirth")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("date")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("Linkedin")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StudyFinishYear")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("StudyProgramId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("StudyProgramId");

                    b.Property<string>("StudyStartYear")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Alumnus_StudyStartYear");

                    b.Property<string>("WorkPlace")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasIndex("CityId");

                    b.HasIndex("CollegeId");

                    b.HasIndex("StudyProgramId");

                    b.HasDiscriminator().HasValue("Alumnus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Maor",
                            LastName = "Levy",
                            Mail = "danny@gmail",
                            Password = "vS/2fLmGDSw=",
                            Phone = "054231",
                            RoleId = 3,
                            CardId = "dcdscdscsd",
                            CityId = 1,
                            CollegeId = 1,
                            DateOfBirth = new DateTime(2022, 3, 21, 16, 30, 16, 875, DateTimeKind.Local).AddTicks(1517),
                            Linkedin = "cdscdscsd",
                            StudyFinishYear = "sdcsdcsd",
                            StudyProgramId = 1,
                            StudyStartYear = "2015",
                            WorkPlace = "dcsdcsd"
                        });
                });

            modelBuilder.Entity("AlumniOrtServer.Models.Employer", b =>
                {
                    b.HasBaseType("AlumniOrtServer.Models.User");

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactRole")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TypeOfBusiness")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Employer");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            FirstName = "maor",
                            LastName = "Levy",
                            Mail = "maor1100@gmail.com",
                            Password = "X65h2+5fsJo=",
                            RoleId = 2,
                            CompanyAddress = "Jerusalem",
                            CompanyName = "Elbit",
                            ContactRole = "CTO",
                            TypeOfBusiness = "HI"
                        });
                });

            modelBuilder.Entity("AlumniOrtServer.Models.Student", b =>
                {
                    b.HasBaseType("AlumniOrtServer.Models.User");

                    b.Property<string>("CardId")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("CardId");

                    b.Property<int>("CityId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("CityId");

                    b.Property<int>("CollegeId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("CollegeId");

                    b.Property<DateTime>("DateOfBirth")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("date")
                        .HasColumnName("DateOfBirth");

                    b.Property<int>("StudyProgramId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("StudyProgramId");

                    b.Property<string>("StudyStartYear")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasIndex("CityId");

                    b.HasIndex("CollegeId");

                    b.HasIndex("StudyProgramId");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("AlumniOrtServer.Data.Entities.Claim", b =>
                {
                    b.HasOne("AlumniOrtServer.Models.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AlumniOrtServer.Data.Entities.Course_StudyProgram", b =>
                {
                    b.HasOne("AlumniOrtServer.Models.StudyProgram", "studyProgram")
                        .WithMany("Course_StudyProgram")
                        .HasForeignKey("StudyProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("studyProgram");
                });

            modelBuilder.Entity("AlumniOrtServer.Data.Entities.JobOffer_City", b =>
                {
                    b.HasOne("AlumniOrtServer.Models.City", "City")
                        .WithMany("JobOffer_Cities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlumniOrtServer.Models.JobOffer", "JobOffer")
                        .WithMany("JobOffer_Cities")
                        .HasForeignKey("JobOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("JobOffer");
                });

            modelBuilder.Entity("AlumniOrtServer.Data.Entities.JobOffer_StudyProgram", b =>
                {
                    b.HasOne("AlumniOrtServer.Models.JobOffer", "JobOffer")
                        .WithMany("JobOffer_StudyPrograms")
                        .HasForeignKey("JobOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlumniOrtServer.Models.StudyProgram", "StudyProgram")
                        .WithMany("JobOffer_StudyPrograms")
                        .HasForeignKey("StudyProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("JobOffer");

                    b.Navigation("StudyProgram");
                });

            modelBuilder.Entity("AlumniOrtServer.Data.Entities.ModeStudy_City", b =>
                {
                    b.HasOne("AlumniOrtServer.Models.City", "City")
                        .WithMany("ModeStudy_Cities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlumniOrtServer.Data.Entities.ModeStudy", "ModeStudy")
                        .WithMany("ModeStudy_Cities")
                        .HasForeignKey("ModeStudyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlumniOrtServer.Models.Teacher", "Teacher")
                        .WithMany("ModeStudy_Cities")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("ModeStudy");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("AlumniOrtServer.Data.Entities.TeacherCourse", b =>
                {
                    b.HasOne("AlumniOrtServer.Data.Entities.Course_StudyProgram", "Course_StudyProgram")
                        .WithMany("TeacherCourses")
                        .HasForeignKey("Course_StudyProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlumniOrtServer.Models.Teacher", "Teacher")
                        .WithMany("TeacherCourses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course_StudyProgram");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("AlumniOrtServer.Data.Entities.TeacherLanguage", b =>
                {
                    b.HasOne("AlumniOrtServer.Data.Entities.Language", "Language")
                        .WithMany("TeacherLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlumniOrtServer.Models.Teacher", "Teacher")
                        .WithMany("TeacherLanguages")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("AlumniOrtServer.Models.JobOffer", b =>
                {
                    b.HasOne("AlumniOrtServer.Models.Employer", "Employer")
                        .WithMany("JobOffers")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("AlumniOrtServer.Models.Teacher", b =>
                {
                    b.HasOne("AlumniOrtServer.Models.Alumnus", "Alumanus")
                        .WithOne("teacher")
                        .HasForeignKey("AlumniOrtServer.Models.Teacher", "AlumnusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Alumanus");
                });

            modelBuilder.Entity("AlumniOrtServer.Models.User", b =>
                {
                    b.HasOne("AlumniOrtServer.Data.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AlumniOrtServer.Models.Alumnus", b =>
                {
                    b.HasOne("AlumniOrtServer.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlumniOrtServer.Models.College", "College")
                        .WithMany()
                        .HasForeignKey("CollegeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlumniOrtServer.Models.StudyProgram", "StudyProgram")
                        .WithMany()
                        .HasForeignKey("StudyProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("College");

                    b.Navigation("StudyProgram");
                });

            modelBuilder.Entity("AlumniOrtServer.Models.Student", b =>
                {
                    b.HasOne("AlumniOrtServer.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlumniOrtServer.Models.College", "College")
                        .WithMany()
                        .HasForeignKey("CollegeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlumniOrtServer.Models.StudyProgram", "StudyProgram")
                        .WithMany()
                        .HasForeignKey("StudyProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("College");

                    b.Navigation("StudyProgram");
                });

            modelBuilder.Entity("AlumniOrtServer.Data.Entities.Course_StudyProgram", b =>
                {
                    b.Navigation("TeacherCourses");
                });

            modelBuilder.Entity("AlumniOrtServer.Data.Entities.Language", b =>
                {
                    b.Navigation("TeacherLanguages");
                });

            modelBuilder.Entity("AlumniOrtServer.Data.Entities.ModeStudy", b =>
                {
                    b.Navigation("ModeStudy_Cities");
                });

            modelBuilder.Entity("AlumniOrtServer.Data.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AlumniOrtServer.Models.City", b =>
                {
                    b.Navigation("JobOffer_Cities");

                    b.Navigation("ModeStudy_Cities");
                });

            modelBuilder.Entity("AlumniOrtServer.Models.JobOffer", b =>
                {
                    b.Navigation("JobOffer_Cities");

                    b.Navigation("JobOffer_StudyPrograms");
                });

            modelBuilder.Entity("AlumniOrtServer.Models.StudyProgram", b =>
                {
                    b.Navigation("Course_StudyProgram");

                    b.Navigation("JobOffer_StudyPrograms");
                });

            modelBuilder.Entity("AlumniOrtServer.Models.Teacher", b =>
                {
                    b.Navigation("ModeStudy_Cities");

                    b.Navigation("TeacherCourses");

                    b.Navigation("TeacherLanguages");
                });

            modelBuilder.Entity("AlumniOrtServer.Models.User", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("AlumniOrtServer.Models.Alumnus", b =>
                {
                    b.Navigation("teacher");
                });

            modelBuilder.Entity("AlumniOrtServer.Models.Employer", b =>
                {
                    b.Navigation("JobOffers");
                });
#pragma warning restore 612, 618
        }
    }
}
